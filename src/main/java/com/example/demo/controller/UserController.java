package com.example.demo.controller;

import com.example.demo.Enum.Activity;
import com.example.demo.dto.UserDTO;
import com.example.demo.entities.User;
import com.example.demo.repository.LogRepository;
import com.example.demo.repository.UserRepository;
import com.example.demo.service.LogService;
import com.example.demo.service.HttpSessionService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping(value = "/users")
public class UserController {

    @Autowired
    private LogService logService;

    @Autowired
    private PasswordEncoder encoder;

    @Autowired
    private UserRepository userRepository;

    @GetMapping(value = {"", "/{id}"}, produces = "application/json")
    public ResponseEntity<String> getUser(@RequestParam(value = "name", required = false) String name,
                                          @RequestParam(value = "active", required = false) boolean active,
                                          @PathVariable(required = false) Long id) {

        try {

            ObjectMapper mapper = new ObjectMapper();
            String json = "";
            HttpStatus status = HttpStatus.OK;

            if (id != null) {

                Optional<User> user = userRepository.findById(id);
                if (user.isPresent()) {

                    json = mapper.writeValueAsString(user.get());
                } else {

                    json = "Não encontrado";
                    status = HttpStatus.NOT_FOUND;
                }
            } else {

                User u = new User();
                u.setId(null);
                if (name != null) {
                    u.setName(name);
                }
                ExampleMatcher matcher = ExampleMatcher.matching().withIgnoreNullValues().withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING);
                Example<User> example = Example.of(u, matcher);
                List<UserDTO> users = userRepository.findAll(example).stream().map(UserDTO::new).collect(Collectors.toList());
                if (active) {
                    json = mapper.writeValueAsString(users);
                } else {
                    json = mapper.writeValueAsString(users.stream().filter(UserDTO::getActive).collect(Collectors.toList()));
                }
            }
            return ResponseEntity.status(status).body(json);

        } catch (Exception e) {

            e.printStackTrace();
            return ResponseEntity.status(404).body("Usuários não encontrado");
        }
    }

    @PostMapping(value = "", produces = "text/plain")
    public ResponseEntity<String> saveUser(@RequestHeader("Authorization") String token, @RequestBody User user) {

        try {

            if (userRepository.findByName(user.getName()).isEmpty()) {

                ObjectMapper mapper = new ObjectMapper();

                user.setPassword(encoder.encode(user.getPassword()));
                user.setActive(1);
                user.setName(user.getName().toUpperCase());
                User u = userRepository.save(user);
                UserDTO convertedUser = new UserDTO(u);

                logService.save(token, Activity.EDIT, "user", u.getId());

                return ResponseEntity.status(200).body("Sucesso ao salvar o usuário " + convertedUser.toString());
            } else {

                return ResponseEntity.status(500).body("O usuário " + user.getName() + " já existe");
            }

        } catch (Exception e) {

            return ResponseEntity.status(400).body("Falha ao salvar o usuário " + e);
        }
    }

    @PutMapping(value = "/{id}", produces = "text/plain")
    public ResponseEntity<String> editUser(@RequestHeader("Authorization") String token,
                                           @PathVariable(required = true) long id) {

        try {

            User user;
            Optional<User> toValidate = userRepository.findById(id);

            if (toValidate.isPresent()) {

                user = toValidate.get();
                user.setActive(0);
                user.setName(user.getName().toUpperCase());
                userRepository.save(user);

                logService.save(token, Activity.EDIT, "user", user.getId());

                return ResponseEntity.status(202).body("Usuário desativado com sucesso");

            } else {

                return ResponseEntity.status(404).body("Usuário com ID: " + id + " não encontrado! ");
            }
        } catch (Exception e) {

            return ResponseEntity.status(500).body("Erro ao editar o usuário" + e.getMessage());
        }
    }
}











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































